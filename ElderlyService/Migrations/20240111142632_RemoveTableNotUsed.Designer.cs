// <auto-generated />
using System;
using ElderlyService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElderlyService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240111142632_RemoveTableNotUsed")]
    partial class RemoveTableNotUsed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElderlyService.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("userId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ElderlyService.Models.Availability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityID"));

                    b.Property<string>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AvailabilityID");

                    b.HasIndex("CaregiverId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("ElderlyService.Models.CardData", b =>
                {
                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ElderlyService.Models.Caregiver", b =>
                {
                    b.Property<string>("CaregiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutYou")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndSubscribe")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PriceOfService")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("Valid")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaregiverId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("userId");

                    b.ToTable("Caregivers");
                });

            modelBuilder.Entity("ElderlyService.Models.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("placeOfExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceId");

                    b.HasIndex("CaregiverId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("ElderlyService.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CaregiverId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ElderlyService.Models.Reviews", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewID");

                    b.HasIndex("CaregiverId");

                    b.HasIndex("userId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ElderlyService.Models.ReviewsForWebsites", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewID");

                    b.HasIndex("userId");

                    b.ToTable("reviewsForWebsites");
                });

            modelBuilder.Entity("ElderlyService.Models.Roles", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeOfUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "1",
                            TypeOfUser = "Admin"
                        },
                        new
                        {
                            RoleId = "2",
                            TypeOfUser = "Caregiver"
                        },
                        new
                        {
                            RoleId = "3",
                            TypeOfUser = "User"
                        });
                });

            modelBuilder.Entity("ElderlyService.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("valid")
                        .HasColumnType("bit");

                    b.HasKey("ServiceId");

                    b.ToTable("services");
                });

            modelBuilder.Entity("ElderlyService.Models.Users", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("userId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            userId = "1",
                            City = "amman",
                            DateOfBirth = new DateTime(1999, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Safi.moumen90@gmail.com",
                            FirstName = "mo'men",
                            Gender = 1,
                            LastName = "Safi",
                            Password = "123456",
                            Phone = "0796959979",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("ElderlyService.Models.Appointment", b =>
                {
                    b.HasOne("ElderlyService.Models.Caregiver", "Caregiver")
                        .WithMany("Appointments")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElderlyService.Models.Users", "Users")
                        .WithMany("Appointments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElderlyService.Models.Availability", b =>
                {
                    b.HasOne("ElderlyService.Models.Caregiver", "Caregiver")
                        .WithMany("Availabilities")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");
                });

            modelBuilder.Entity("ElderlyService.Models.Caregiver", b =>
                {
                    b.HasOne("ElderlyService.Models.Service", "Service")
                        .WithMany("Caregivers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElderlyService.Models.Users", "Users")
                        .WithMany("caregivers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElderlyService.Models.Experience", b =>
                {
                    b.HasOne("ElderlyService.Models.Caregiver", "Caregiver")
                        .WithMany("Experiences")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");
                });

            modelBuilder.Entity("ElderlyService.Models.Payment", b =>
                {
                    b.HasOne("ElderlyService.Models.Caregiver", "Caregiver")
                        .WithMany("payments")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");
                });

            modelBuilder.Entity("ElderlyService.Models.Reviews", b =>
                {
                    b.HasOne("ElderlyService.Models.Caregiver", "Caregiver")
                        .WithMany("Reviews")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElderlyService.Models.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caregiver");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElderlyService.Models.ReviewsForWebsites", b =>
                {
                    b.HasOne("ElderlyService.Models.Users", "Users")
                        .WithMany("ReviewsForWebsites")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElderlyService.Models.Users", b =>
                {
                    b.HasOne("ElderlyService.Models.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ElderlyService.Models.Caregiver", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");

                    b.Navigation("Experiences");

                    b.Navigation("Reviews");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("ElderlyService.Models.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElderlyService.Models.Service", b =>
                {
                    b.Navigation("Caregivers");
                });

            modelBuilder.Entity("ElderlyService.Models.Users", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");

                    b.Navigation("ReviewsForWebsites");

                    b.Navigation("caregivers");
                });
#pragma warning restore 612, 618
        }
    }
}
